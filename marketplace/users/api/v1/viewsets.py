import coreapi
import coreschema
from django.utils.translation import ugettext_lazy as _
from rest_framework import status, viewsets
from rest_framework.decorators import action
from rest_framework.permissions import AllowAny
from rest_framework.response import Response
from rest_framework.schemas import ManualSchema
from rest_framework.viewsets import GenericViewSet

from marketplace.users.api.v1.serializers import UserSerializer, RequestRestoreCodeSerializer, \
    RestorePasswordSerializer, VerifySerializer
from marketplace.users.models import User
from users.helpers import restore_password, verify_email


class UserViewSet(GenericViewSet):
    serializer_class = UserSerializer

    def get_queryset(self):
        return User.objects.filter(pk=self.request.user.pk)

    @action(methods=['GET'], detail=False)
    def me(self, request):
        serializer = self.get_serializer(instance=request.user)
        return Response(data=serializer.data, status=status.HTTP_200_OK)


class RequestRestoreCodeViewSet(viewsets.ViewSet):
    """Resource to handle the request of a restore password code."""
    permission_classes = [
        AllowAny
    ]

    schema = ManualSchema(
        encoding="application/json",
        fields=[
            coreapi.Field(
                "email",
                required=True,
                location="body",
                schema=coreschema.String(
                    description=_("Email of the user who is requesting a new code for restore his password.")
                )
            ),
        ]
    )

    def create(self, request):
        serializer = RequestRestoreCodeSerializer(data=request.data)
        if serializer.is_valid():
            email = serializer.validated_data["email"]
            user = User.objects.get(email=email)
            user.send_restore_code()
            return Response(serializer.data, status=status.HTTP_201_CREATED)
        else:
            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)


class RestorePasswordViewSet(viewsets.ViewSet):
    """Resource to handle the restoration of a password."""
    permission_classes = [
        AllowAny
    ]

    schema = ManualSchema(
        encoding="application/json",
        fields=[
            coreapi.Field(
                "password",
                required=True,
                location="body",
                schema=coreschema.String(
                    description=_("New password for the user.")
                ),
            ),
            coreapi.Field(
                "repeat_password",
                required=True,
                location="body",
                schema=coreschema.String(
                    description=_("Repetition of the new password for the user.")
                ),
            ),
            coreapi.Field(
                "restore_password_code",
                required=True,
                location="body",
                schema=coreschema.String(
                    description=_("Code generated by the backend to identify the user who is requesting "
                                  "the new password.")
                ),
            ),
        ]
    )

    def create(self, request):
        serializer = RestorePasswordSerializer(data=request.data)
        if serializer.is_valid():
            password = serializer.validated_data["password"]
            restore_password_code = serializer.validated_data["restore_password_code"]
            restore_password(restore_password_code, password)
            return Response(serializer.data, status=status.HTTP_201_CREATED)
        else:
            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)


class VerifyViewSet(viewsets.ViewSet):
    """Resource to handle the verification of an user's email."""
    permission_classes = [
        AllowAny
    ]

    schema = ManualSchema(
        encoding="application/json",
        fields=[
            coreapi.Field(
                "verification_code",
                required=True,
                location="body",
                schema=coreschema.String(
                    description=_("Verification code for the user.")
                ),
            ),
        ]
    )

    def create(self, request):
        serializer = VerifySerializer(data=request.data)
        if serializer.is_valid():
            verification_code = serializer.validated_data["verification_code"]
            verify_email(verification_code)
            return Response(serializer.data, status=status.HTTP_201_CREATED)
        else:
            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
